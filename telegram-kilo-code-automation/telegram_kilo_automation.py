#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script d'automatisation Telegram -> Kilo Code VSCode
Permet d'envoyer des commandes depuis Telegram vers l'extension Kilo Code
"""

import os
import sys
import time
import logging
import platform
import threading
import json
from typing import List, Optional, Tuple
from dotenv import load_dotenv
import pyautogui
import pyperclip
from pynput.keyboard import Key, Controller
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Import pour la d√©tection de fen√™tre (Windows/Linux/Mac)
try:
    import pygetwindow as gw
    WINDOW_DETECTION_AVAILABLE = True
except ImportError:
    WINDOW_DETECTION_AVAILABLE = False
    logger.warning("pygetwindow non disponible. La d√©tection de fen√™tre sera limit√©e.")

# Configuration du logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Chargement des variables d'environnement
load_dotenv()

# Configuration
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ALLOWED_USER_IDS = [int(uid.strip()) for uid in os.getenv('TELEGRAM_ALLOWED_USER_IDS', '').split(',') if uid.strip()]
KILO_CODE_INPUT_X = int(os.getenv('KILO_CODE_INPUT_X', 500))
KILO_CODE_INPUT_Y = int(os.getenv('KILO_CODE_INPUT_Y', 800))
KILO_CODE_SEND_BUTTON_X = int(os.getenv('KILO_CODE_SEND_BUTTON_X', 850))
KILO_CODE_SEND_BUTTON_Y = int(os.getenv('KILO_CODE_SEND_BUTTON_Y', 800))
KILO_CODE_SEND_SHORTCUT = os.getenv('KILO_CODE_SEND_SHORTCUT', 'ctrl+enter')
SECURITY_MODE = os.getenv('SECURITY_MODE', 'true').lower() == 'true'
ACTION_DELAY = float(os.getenv('ACTION_DELAY', 0.5))

# Configuration pour surveiller les r√©ponses de l'IA
MONITORING_ENABLED = os.getenv('MONITORING_ENABLED', 'true').lower() == 'true'
MONITORING_INTERVAL = int(os.getenv('MONITORING_INTERVAL', 3))  # secondes entre chaque v√©rification
KILO_CODE_RESPONSE_X = int(os.getenv('KILO_CODE_RESPONSE_X', 600))
KILO_CODE_RESPONSE_Y = int(os.getenv('KILO_CODE_RESPONSE_Y', 700))
KILO_CODE_COPY_SHORTCUT = os.getenv('KILO_CODE_COPY_SHORTCUT', 'ctrl+a,ctrl+c')
LAST_RESPONSE_FILE = 'last_response.json'

# Contr√¥leur clavier
keyboard = Controller()

# Statistiques
stats = {
    'messages_received': 0,
    'messages_sent': 0,
    'errors': 0
}

# Cache pour √©viter de traiter les m√™mes messages en boucle
processed_messages = set()
last_message_time = 0
MESSAGE_COOLDOWN = 2  # secondes entre deux messages identiques


def is_user_authorized(user_id: int) -> bool:
    """V√©rifie si l'utilisateur est autoris√©"""
    if not SECURITY_MODE:
        return True
    return user_id in ALLOWED_USER_IDS


def find_vscode_window() -> Optional[Tuple[int, int, int, int]]:
    """
    Recherche la fen√™tre VSCode/Code ouverte

    Returns:
        Tuple (x, y, width, height) de la fen√™tre VSCode, ou None si non trouv√©e
    """
    if not WINDOW_DETECTION_AVAILABLE:
        logger.warning("D√©tection de fen√™tre non disponible, utilisation des coordonn√©es par d√©faut")
        return None

    try:
        system = platform.system().lower()

        # Recherche par titre de fen√™tre selon le syst√®me
        if system == "windows":
            windows = gw.getWindowsWithTitle("Visual Studio Code")
            windows.extend(gw.getWindowsWithTitle("Code"))
        elif system == "darwin":  # macOS
            windows = gw.getWindowsWithTitle("Visual Studio Code")
            windows.extend(gw.getWindowsWithTitle("Code"))
        else:  # Linux
            windows = gw.getWindowsWithTitle("Visual Studio Code")
            windows.extend(gw.getWindowsWithTitle("Code"))
            windows.extend(gw.getWindowsWithTitle("vscode"))

        if windows:
            window = windows[0]  # Prendre la premi√®re fen√™tre trouv√©e
            if window.isMinimized:
                logger.info("Fen√™tre VSCode minimis√©e, restauration...")
                window.restore()

            window.activate()
            time.sleep(0.5)  # Attendre l'activation

            x, y, width, height = window.left, window.top, window.width, window.height
            logger.info(f"Fen√™tre VSCode trouv√©e: {x},{y} ({width}x{height})")
            return (x, y, width, height)

    except Exception as e:
        logger.error(f"Erreur lors de la recherche de la fen√™tre VSCode: {str(e)}")

    logger.warning("Fen√™tre VSCode non trouv√©e")
    return None


def is_vscode_active() -> bool:
    """
    V√©rifie si VSCode est la fen√™tre active

    Returns:
        True si VSCode est actif, False sinon
    """
    if not WINDOW_DETECTION_AVAILABLE:
        return True  # Supposer que c'est actif si on ne peut pas v√©rifier

    try:
        system = platform.system().lower()
        active_window = gw.getActiveWindow()

        if active_window:
            title = active_window.title.lower()
            return "visual studio code" in title or "code" in title

    except Exception as e:
        logger.error(f"Erreur lors de la v√©rification de la fen√™tre active: {str(e)}")

    return False


def ensure_vscode_active() -> bool:
    """
    S'assure que VSCode est actif et visible

    Returns:
        True si VSCode est pr√™t, False sinon
    """
    logger.info("V√©rification de la pr√©sence de VSCode...")

    # Recherche de la fen√™tre VSCode
    window_info = find_vscode_window()

    if window_info:
        # V√©rifier si VSCode est actif
        if not is_vscode_active():
            logger.info("Activation de la fen√™tre VSCode...")
            if window_info:
                x, y, width, height = window_info
                # Cliquer au centre de la fen√™tre pour l'activer
                center_x = x + (width // 2)
                center_y = y + (height // 2)
                pyautogui.click(center_x, center_y)
                time.sleep(1.0)

        return True

    logger.error("VSCode non trouv√© ou non accessible")
    return False


def load_last_response() -> str:
    """Charge la derni√®re r√©ponse connue depuis le fichier"""
    try:
        if os.path.exists(LAST_RESPONSE_FILE):
            with open(LAST_RESPONSE_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('last_response', '')
    except Exception as e:
        logger.error(f"Erreur lors du chargement de la derni√®re r√©ponse: {str(e)}")
    return ''


def save_last_response(response: str) -> None:
    """Sauvegarde la derni√®re r√©ponse dans un fichier"""
    try:
        with open(LAST_RESPONSE_FILE, 'w', encoding='utf-8') as f:
            json.dump({'last_response': response, 'timestamp': time.time()}, f)
    except Exception as e:
        logger.error(f"Erreur lors de la sauvegarde de la derni√®re r√©ponse: {str(e)}")


def get_kilo_code_response() -> Optional[str]:
    """
    Extrait la r√©ponse de l'IA depuis l'interface Kilo Code

    Returns:
        Le texte de la r√©ponse ou None si aucune nouvelle r√©ponse
    """
    try:
        # S'assurer que VSCode est actif
        if not ensure_vscode_active():
            logger.error("VSCode non actif")
            return None

        logger.info(f"Clic sur la zone de r√©ponse ({KILO_CODE_RESPONSE_X}, {KILO_CODE_RESPONSE_Y})")
        # Cliquer sur la zone de r√©ponse pour la s√©lectionner
        pyautogui.click(KILO_CODE_RESPONSE_X, KILO_CODE_RESPONSE_Y)
        time.sleep(ACTION_DELAY * 0.5)

        # Copier le texte (s√©lectionner tout + copier)
        logger.info(f"Utilisation du raccourci: {KILO_CODE_COPY_SHORTCUT}")
        keys = KILO_CODE_COPY_SHORTCUT.split(',')
        for key_combo in keys:
            key_combo = key_combo.strip()
            if '+' in key_combo:
                pyautogui.hotkey(*key_combo.split('+'))
            else:
                pyautogui.press(key_combo)
            time.sleep(0.1)

        # R√©cup√©rer le texte depuis le presse-papiers
        response_text = pyperclip.paste().strip()

        logger.info(f"Texte extrait ({len(response_text) if response_text else 0} caract√®res): {response_text[:100] if response_text else 'Aucun'}...")

        if response_text and len(response_text) > 10:  # Filtrer les r√©ponses trop courtes
            return response_text

    except Exception as e:
        logger.error(f"Erreur lors de l'extraction de la r√©ponse: {str(e)}")

    return None


def force_send_response(context: ContextTypes.DEFAULT_TYPE, text: str) -> bool:
    """
    Force l'envoi d'une r√©ponse sur Telegram (m√™me courte)

    Args:
        context: Le contexte Telegram
        text: Le texte √† envoyer (peut √™tre court)

    Returns:
        True si l'envoi a r√©ussi, False sinon
    """
    try:
        if not text:
            logger.error("Aucun texte √† envoyer")
            return False

        logger.info(f"Pr√©paration de l'envoi Telegram: {len(text)} caract√®res")

        # Tronquer le texte s'il est trop long (limite Telegram)
        if len(text) > 4000:
            text = text[:3997] + "..."
            logger.info("Texte tronqu√© √† 4000 caract√®res")

        # ‚ö†Ô∏è IMPORTANT : TOUJOURS identifier comme r√©ponse IA pour √©viter la boucle
        ia_response = f"ü§ñ **R√©ponse de Kilo Code:**\n\n{text}"

        logger.info(f"Message format√©, envoi √† {len(ALLOWED_USER_IDS)} utilisateur(s)")

        # Envoyer √† tous les utilisateurs autoris√©s
        success_count = 0
        for user_id in ALLOWED_USER_IDS:
            try:
                logger.info(f"Envoi √† l'utilisateur {user_id}...")
                context.bot.send_message(
                    chat_id=user_id,
                    text=ia_response,
                    parse_mode='Markdown'
                )
                success_count += 1
                logger.info(f"‚úì Message envoy√© avec succ√®s √† {user_id}")
                time.sleep(0.5)  # √âviter le rate limiting
            except Exception as e:
                logger.error(f"Erreur lors de l'envoi √† l'utilisateur {user_id}: {str(e)}")

        if success_count > 0:
            logger.info(f"‚úì R√©ponse forc√©e envoy√©e sur Telegram √† {success_count} utilisateur(s)")
            return True
        else:
            logger.error("Aucun message n'a pu √™tre envoy√© sur Telegram")
            return False

    except Exception as e:
        logger.error(f"Erreur g√©n√©rale lors de l'envoi Telegram: {str(e)}")
        return False


def send_to_telegram(context: ContextTypes.DEFAULT_TYPE, text: str) -> bool:
    """
    Envoie un message sur Telegram (TOUJOURS depuis l'IA)

    Args:
        context: Le contexte Telegram
        text: Le texte √† envoyer

    Returns:
        True si l'envoi a r√©ussi, False sinon
    """
    try:
        if not text or len(text) < 2:
            return False

        # Tronquer le texte s'il est trop long (limite Telegram)
        if len(text) > 4000:
            text = text[:3997] + "..."

        # ‚ö†Ô∏è IMPORTANT : TOUJOURS identifier comme r√©ponse IA pour √©viter la boucle
        ia_response = f"ü§ñ **R√©ponse de Kilo Code:**\n\n{text}"

        # Envoyer √† tous les utilisateurs autoris√©s
        success_count = 0
        for user_id in ALLOWED_USER_IDS:
            try:
                context.bot.send_message(
                    chat_id=user_id,
                    text=ia_response,
                    parse_mode='Markdown'
                )
                success_count += 1
                time.sleep(0.5)  # √âviter le rate limiting
            except Exception as e:
                logger.error(f"Erreur lors de l'envoi √† l'utilisateur {user_id}: {str(e)}")

        if success_count > 0:
            logger.info(f"‚úì R√©ponse IA envoy√©e sur Telegram √† {success_count} utilisateur(s)")
            return True
        else:
            logger.error("Aucun message n'a pu √™tre envoy√© sur Telegram")
            return False

    except Exception as e:
        logger.error(f"Erreur g√©n√©rale lors de l'envoi Telegram: {str(e)}")
        return False


def monitor_kilo_code_responses(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Surveille les r√©ponses de l'IA dans Kilo Code et les envoie sur Telegram
    """
    logger.info("D√©marrage du monitoring IA...")

    while True:
        try:
            if not MONITORING_ENABLED:
                logger.info("Monitoring d√©sactiv√©, pause...")
                time.sleep(MONITORING_INTERVAL)
                continue

            logger.info(f"Cycle de monitoring (intervalle: {MONITORING_INTERVAL}s)")

            # Charger la derni√®re r√©ponse connue
            last_response = load_last_response()
            logger.info(f"Derni√®re r√©ponse connue: {len(last_response) if last_response else 0} caract√®res")

            # Extraire la r√©ponse actuelle depuis Kilo Code
            current_response = get_kilo_code_response()

            if current_response:
                logger.info(f"R√©ponse actuelle extraite: {len(current_response)} caract√®res")

                # V√©rifier si c'est une nouvelle r√©ponse
                if current_response != last_response:
                    logger.info("NOUVELLE r√©ponse d√©tect√©e!")

                    # Utiliser force_send_response pour envoyer m√™me les r√©ponses courtes
                    logger.info("Envoi de la r√©ponse sur Telegram...")
                    success = force_send_response(context, current_response)

                    if success:
                        logger.info("R√©ponse envoy√©e avec succ√®s, sauvegarde...")
                        # Sauvegarder cette r√©ponse comme derni√®re connue
                        save_last_response(current_response)
                    else:
                        logger.error("√âchec de l'envoi sur Telegram")
                else:
                    logger.info("R√©ponse identique √† la pr√©c√©dente, ignor√©e")
            else:
                logger.info("Aucune r√©ponse extraite")

            # Attendre avant la prochaine v√©rification
            logger.info(f"Attente de {MONITORING_INTERVAL} secondes...")
            time.sleep(MONITORING_INTERVAL)

        except Exception as e:
            logger.error(f"Erreur dans le monitoring: {str(e)}")
            time.sleep(MONITORING_INTERVAL)


def send_to_kilo_code(text: str) -> bool:
    """
    Envoie le texte √† l'extension Kilo Code de VSCode

    Args:
        text: Le texte √† envoyer

    Returns:
        True si l'envoi a r√©ussi, False sinon
    """
    try:
        logger.info(f"Envoi du texte vers Kilo Code: {text[:50]}...")

        # √âtape 1: V√©rifier et activer VSCode (une seule fois)
        if not ensure_vscode_active():
            logger.error("Impossible d'activer VSCode")
            return False

        # √âtape 2: Cliquer sur le champ de texte de Kilo Code
        logger.info(f"Clic sur le champ texte ({KILO_CODE_INPUT_X}, {KILO_CODE_INPUT_Y})")
        pyautogui.click(KILO_CODE_INPUT_X, KILO_CODE_INPUT_Y)
        time.sleep(ACTION_DELAY)

        # √âtape 3: S√©lectionner tout le texte existant et le supprimer (optimis√©)
        pyautogui.hotkey('ctrl', 'a')
        time.sleep(0.1)  # R√©duit de 0.2 √† 0.1
        pyautogui.press('delete')
        time.sleep(0.1)  # R√©duit de 0.2 √† 0.1

        # √âtape 4: Taper le nouveau texte (vitesse optimis√©e)
        logger.info("Saisie du texte...")
        pyautogui.write(text, interval=0.005)  # Augment√© la vitesse de 0.01 √† 0.005
        time.sleep(ACTION_DELAY)

        # √âtape 5: Envoyer le message (logique optimis√©e)
        logger.info("Envoi du message...")
        if KILO_CODE_SEND_SHORTCUT and KILO_CODE_SEND_SHORTCUT.lower() != 'none':
            # Utiliser le raccourci clavier
            keys = KILO_CODE_SEND_SHORTCUT.split('+')
            if len(keys) == 2:
                pyautogui.hotkey(keys[0].strip(), keys[1].strip())
            else:
                pyautogui.press(keys[0].strip())
        else:
            # Cliquer sur le bouton Envoyer
            pyautogui.click(KILO_CODE_SEND_BUTTON_X, KILO_CODE_SEND_BUTTON_Y)

        time.sleep(ACTION_DELAY * 0.5)  # R√©duit le d√©lai final
        logger.info("‚úì Message envoy√© avec succ√®s")
        return True

    except Exception as e:
        logger.error(f"‚úó Erreur lors de l'envoi: {str(e)}")
        return False


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Commande /start"""
    user_id = update.effective_user.id
    
    if not is_user_authorized(user_id):
        await update.message.reply_text(
            "‚ùå Acc√®s refus√©. Vous n'√™tes pas autoris√© √† utiliser ce bot."
        )
        logger.warning(f"Tentative d'acc√®s non autoris√©e: User ID {user_id}")
        return
    
    welcome_message = """
ü§ñ **Bot Telegram <-> Kilo Code VSCode**

‚úÖ Vous √™tes autoris√© √† utiliser ce bot.

**Commandes disponibles:**
/start - Afficher ce message
/status - Voir les statistiques
/help - Aide d√©taill√©e
/test - Tester la connexion
/calibrate - Guide de calibrage des coordonn√©es

**Nouvelles commandes (Monitoring IA):**
/monitor_status - √âtat du monitoring IA
/monitor_toggle - Activer/d√©sactiver le monitoring

**Utilisation:**
‚Ä¢ Envoyez votre texte ‚Üí automatiquement ins√©r√© dans Kilo Code
‚Ä¢ Les r√©ponses IA ‚Üí automatiquement envoy√©es sur Telegram

‚ö†Ô∏è **Important:** Assurez-vous que VSCode avec l'extension Kilo Code est ouvert et visible.
    """
    
    await update.message.reply_text(welcome_message, parse_mode='Markdown')


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Commande /status"""
    user_id = update.effective_user.id
    
    if not is_user_authorized(user_id):
        await update.message.reply_text("‚ùå Acc√®s refus√©.")
        return
    
    status_message = f"""
üìä **Statistiques du Bot**

Messages re√ßus: {stats['messages_received']}
Messages envoy√©s: {stats['messages_sent']}
Erreurs: {stats['errors']}

üîí Mode s√©curit√©: {'Activ√©' if SECURITY_MODE else 'D√©sactiv√©'}
üë• Utilisateurs autoris√©s: {len(ALLOWED_USER_IDS)}
ü§ñ Monitoring IA: {'Activ√©' if MONITORING_ENABLED else 'D√©sactiv√©'}
‚è±Ô∏è Intervalle monitoring: {MONITORING_INTERVAL}s
    """
    
    await update.message.reply_text(status_message, parse_mode='Markdown')


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Commande /help"""
    user_id = update.effective_user.id
    
    if not is_user_authorized(user_id):
        await update.message.reply_text("‚ùå Acc√®s refus√©.")
        return
    
    help_message = """
üìñ **Guide d'utilisation**

**Configuration requise:**
1. VSCode ouvert avec l'extension Kilo Code active
2. Le champ texte de Kilo Code visible √† l'√©cran
3. Les coordonn√©es correctement configur√©es dans .env

**Fonctionnement:**
1. Envoyez votre texte/commande via Telegram
2. Le bot clique sur le champ Kilo Code
3. Le texte est ins√©r√© automatiquement
4. Le message est envoy√© automatiquement

**Monitoring IA (Nouveau):**
1. Le bot surveille automatiquement les r√©ponses de l'IA
2. Les nouvelles r√©ponses sont envoy√©es sur Telegram
3. √âvite les duplications gr√¢ce au syst√®me de cache

**Commandes de monitoring:**
- /monitor_status - √âtat du monitoring IA
- /monitor_toggle - Activer/d√©sactiver le monitoring
- /test_monitoring - Tester l'envoi des r√©ponses IA

**Conseils:**
- Utilisez /test pour v√©rifier la configuration
- Utilisez /test_monitoring pour tester le monitoring IA
- Ajustez les coordonn√©es dans .env si n√©cessaire
- Gardez VSCode au premier plan pendant l'utilisation

**S√©curit√©:**
- Seuls les utilisateurs autoris√©s peuvent utiliser le bot
- Chaque action est journalis√©e
- Mode s√©curit√© activable/d√©sactivable
    """
    
    await update.message.reply_text(help_message, parse_mode='Markdown')


async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Commande /test"""
    user_id = update.effective_user.id

    if not is_user_authorized(user_id):
        await update.message.reply_text("‚ùå Acc√®s refus√©.")
        return

    await update.message.reply_text("üß™ Test en cours...")

    test_text = "Test automatique depuis Telegram"
    success = send_to_kilo_code(test_text)

    if success:
        await update.message.reply_text("‚úÖ Test r√©ussi! Le message a √©t√© envoy√© √† Kilo Code.")
    else:
        await update.message.reply_text("‚ùå Test √©chou√©. V√©rifiez les logs et la configuration.")


async def test_monitoring_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Commande /test_monitoring - Test du syst√®me de monitoring IA"""
    user_id = update.effective_user.id

    if not is_user_authorized(user_id):
        await update.message.reply_text("‚ùå Acc√®s refus√©.")
        return

    await update.message.reply_text("üß™ Test du monitoring IA...")

    # Test de la fonction d'extraction de r√©ponse
    test_response = "Ceci est un test de r√©ponse IA pour v√©rifier le monitoring"

    # Sauvegarder temporairement la derni√®re r√©ponse
    original_last = load_last_response()

    # Tester l'envoi direct
    success = force_send_response(context, test_response)

    # Restaurer la derni√®re r√©ponse originale
    if original_last:
        save_last_response(original_last)

    if success:
        await update.message.reply_text("‚úÖ Test du monitoring r√©ussi! La r√©ponse de test a √©t√© envoy√©e.")
    else:
        await update.message.reply_text("‚ùå Test du monitoring √©chou√©. V√©rifiez la configuration Telegram.")


async def monitor_status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Commande /monitor_status - √âtat du monitoring IA"""
    user_id = update.effective_user.id

    if not is_user_authorized(user_id):
        await update.message.reply_text("‚ùå Acc√®s refus√©.")
        return

    # V√©rifier si le fichier de derni√®re r√©ponse existe
    last_response_info = "Aucune r√©ponse sauvegard√©e"
    if os.path.exists(LAST_RESPONSE_FILE):
        try:
            with open(LAST_RESPONSE_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                timestamp = data.get('timestamp', 0)
                if timestamp:
                    from datetime import datetime
                    dt = datetime.fromtimestamp(timestamp)
                    last_response_info = f"Derni√®re r√©ponse: {dt.strftime('%H:%M:%S')}"
        except:
            last_response_info = "Erreur lors de la lecture du fichier"

    status_message = f"""
ü§ñ **√âtat du Monitoring IA**

üîÑ Monitoring: {'üü¢ Activ√©' if MONITORING_ENABLED else 'üî¥ D√©sactiv√©'}
‚è±Ô∏è Intervalle: {MONITORING_INTERVAL} secondes
üìç Zone surveill√©e: ({KILO_CODE_RESPONSE_X}, {KILO_CODE_RESPONSE_Y})
üìã Raccourci copie: {KILO_CODE_COPY_SHORTCUT}
üíæ {last_response_info}

**Configuration recommand√©e:**
- Coordonn√©es de la zone de r√©ponse IA
- Raccourci pour s√©lectionner et copier le texte
- Intervalle de v√©rification (3-5 secondes recommand√©)
    """

    await update.message.reply_text(status_message, parse_mode='Markdown')


async def monitor_toggle_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Commande /monitor_toggle - Active/d√©sactive le monitoring IA"""
    user_id = update.effective_user.id

    if not is_user_authorized(user_id):
        await update.message.reply_text("‚ùå Acc√®s refus√©.")
        return

    global MONITORING_ENABLED

    # Basculer l'√©tat du monitoring
    MONITORING_ENABLED = not MONITORING_ENABLED

    status = "üü¢ ACTIV√â" if MONITORING_ENABLED else "üî¥ D√âSACTIV√â"
    await update.message.reply_text(f"‚úÖ Monitoring IA {status}")

    logger.info(f"Monitoring IA {'activ√©' if MONITORING_ENABLED else 'd√©sactiv√©'} par l'utilisateur {user_id}")


async def calibrate_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Commande /calibrate - Aide au calibrage des coordonn√©es"""
    user_id = update.effective_user.id

    if not is_user_authorized(user_id):
        await update.message.reply_text("‚ùå Acc√®s refus√©.")
        return

    calibrate_message = """
üîß **Guide de calibrage des coordonn√©es**

**√âtape 1:** Ouvrez VSCode avec l'extension Kilo Code active
**√âtape 2:** Positionnez votre souris sur le champ texte de Kilo Code
**√âtape 3:** Ex√©cutez cette commande pour capturer les coordonn√©es

üìç **Commande de capture:**
```
pyautogui.position()
```

**√âtape 4:** Mettez √† jour votre fichier .env:
```
KILO_CODE_INPUT_X=votre_x
KILO_CODE_INPUT_Y=votre_y
```

**Conseils:**
- Utilisez la commande /test pour v√©rifier apr√®s calibrage
- Les coordonn√©es peuvent varier selon la r√©solution d'√©cran
- Assurez-vous que VSCode est en plein √©cran pour plus de stabilit√©

‚ö†Ô∏è **Important:** Les coordonn√©es actuelles sont:
- Champ texte: ({KILO_CODE_INPUT_X}, {KILO_CODE_INPUT_Y})
- Bouton envoyer: ({KILO_CODE_SEND_BUTTON_X}, {KILO_CODE_SEND_BUTTON_Y})
    """

    await update.message.reply_text(calibrate_message, parse_mode='Markdown')


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√®re les messages texte re√ßus"""
    global last_message_time

    user_id = update.effective_user.id
    user_name = update.effective_user.username or update.effective_user.first_name
    message_text = update.message.text.strip()
    current_time = time.time()

    # Cr√©er une cl√© unique pour ce message
    message_key = f"{user_id}:{message_text}:{current_time}"

    # üö´ FILTRAGE ANTI-BOUCLE : Ignorer les messages qui viennent des r√©ponses IA
    ia_signatures = [
        "ü§ñ **R√©ponse de Kilo Code:**",
        "ü§ñ R√©ponse de Kilo Code :",
        "R√©ponse de Kilo Code",
        "‚úÖ T√¢che termin√©e",
        "‚úÖ Code corrig√©",
        "‚úÖ Page cr√©√©e",
        "üìã Explication"
    ]

    # V√©rifier si le message contient une signature de r√©ponse IA
    is_ia_response = any(signature in message_text for signature in ia_signatures)

    if is_ia_response:
        logger.info("Message de r√©ponse IA ignor√© (anti-boucle)")
        return

    # V√©rification anti-boucle : m√™me message dans les 2 secondes
    if message_text == getattr(context.bot_data, 'last_message_text', None):
        if current_time - getattr(context.bot_data, 'last_message_time', 0) < MESSAGE_COOLDOWN:
            logger.info("Message dupliqu√© ignor√© (anti-boucle)")
            return

    # V√©rification de l'autorisation
    if not is_user_authorized(user_id):
        await update.message.reply_text("‚ùå Acc√®s refus√©. Vous n'√™tes pas autoris√©.")
        logger.warning(f"Message non autoris√© de {user_name} (ID: {user_id})")
        stats['errors'] += 1
        return

    # Anti-spam : limiter les messages trop fr√©quents
    if current_time - last_message_time < 1.0:  # Minimum 1 seconde entre messages
        logger.info("Message ignor√© (anti-spam)")
        return

    stats['messages_received'] += 1
    last_message_time = current_time

    # Stocker le dernier message pour √©viter les duplications
    context.bot_data['last_message_text'] = message_text
    context.bot_data['last_message_time'] = current_time

    logger.info(f"Message re√ßu de {user_name} (ID: {user_id}): {message_text[:50]}...")

    # V√©rification basique du message
    if not message_text or len(message_text) < 2:
        await update.message.reply_text("üìù Message trop court, ignor√©.")
        return

    # Confirmation de r√©ception (√©viter le spam de confirmations)
    if stats['messages_received'] % 5 == 1:  # Tous les 5 messages
        await update.message.reply_text("üì® Message re√ßu, traitement en cours...")

    # Envoi vers Kilo Code avec gestion d'erreur am√©lior√©e
    success = send_to_kilo_code(message_text)

    if success:
        stats['messages_sent'] += 1
        # Confirmation de succ√®s (pas √† chaque fois pour √©viter le spam)
        if stats['messages_sent'] % 3 == 1:  # Tous les 3 succ√®s
            await update.message.reply_text("‚úÖ Commande ex√©cut√©e avec succ√®s!")
    else:
        stats['errors'] += 1
        # Message d'erreur seulement si plusieurs erreurs cons√©cutives
        if stats['errors'] % 3 == 1:  # Toutes les 3 erreurs
            await update.message.reply_text(
                "‚ùå Erreur lors de l'ex√©cution. V√©rifiez que VSCode est ouvert."
            )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√®re les erreurs"""
    logger.error(f"Exception lors du traitement de la mise √† jour: {context.error}")
    stats['errors'] += 1


def validate_configuration() -> bool:
    """Valide la configuration avant le d√©marrage"""
    errors = []
    
    if not TELEGRAM_BOT_TOKEN:
        errors.append("‚ùå TELEGRAM_BOT_TOKEN manquant dans .env")
    
    if SECURITY_MODE and not ALLOWED_USER_IDS:
        errors.append("‚ùå TELEGRAM_ALLOWED_USER_IDS manquant (mode s√©curit√© activ√©)")
    
    if errors:
        for error in errors:
            logger.error(error)
        return False
    
    logger.info("‚úì Configuration valid√©e")
    return True


def main():
    """Point d'entr√©e principal"""
    print("""
+================================================+
|   Bot Telegram <-> Kilo Code VSCode Automation |
|   Version 2.0.0 - Avec monitoring IA           |
+================================================+
    """)

    # Validation de la configuration
    if not validate_configuration():
        logger.error("Configuration invalide. Arr√™t du bot.")
        sys.exit(1)

    # Configuration de PyAutoGUI
    pyautogui.FAILSAFE = True  # D√©placer la souris dans le coin pour arr√™ter
    pyautogui.PAUSE = 0.1

    logger.info("D√©marrage du bot...")
    logger.info(f"Mode s√©curit√©: {'Activ√©' if SECURITY_MODE else 'D√©sactiv√©'}")
    logger.info(f"Utilisateurs autoris√©s: {len(ALLOWED_USER_IDS)}")
    logger.info(f"Monitoring IA: {'Activ√©' if MONITORING_ENABLED else 'D√©sactiv√©'}")

    # Cr√©ation de l'application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Ajout des handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("test_monitoring", test_monitoring_command))
    application.add_handler(CommandHandler("calibrate", calibrate_command))
    application.add_handler(CommandHandler("monitor_status", monitor_status_command))
    application.add_handler(CommandHandler("monitor_toggle", monitor_toggle_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)

    # D√©marrer le monitoring en arri√®re-plan si activ√©
    if MONITORING_ENABLED:
        logger.info("D√©marrage du monitoring des r√©ponses IA...")
        monitor_thread = threading.Thread(
            target=monitor_kilo_code_responses,
            args=(application,),
            daemon=True
        )
        monitor_thread.start()
        logger.info("‚úì Monitoring d√©marr√© en arri√®re-plan")

    # D√©marrage du bot
    logger.info("‚úì Bot d√©marr√© et en attente de messages...")
    logger.info("Appuyez sur Ctrl+C pour arr√™ter")

    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        logger.info("\nArr√™t du bot...")
        logger.info(f"Statistiques finales: {stats}")
    except Exception as e:
        logger.error(f"Erreur fatale: {str(e)}")
        sys.exit(1)
    finally:
        # Nettoyage final
        processed_messages.clear()
        logger.info("Nettoyage effectu√©")


if __name__ == '__main__':
    main()
